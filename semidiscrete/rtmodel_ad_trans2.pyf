!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module rtmodel_ad_trans2 ! in 
    interface  ! in :rtmodel_ad_trans2
        module mo_rtmodel ! in :rtmodel_ad_trans2:rtmodel_ad_trans.f90
            double precision parameter,optional :: skab=-100.0
            integer :: lad
            integer parameter,optional :: rtmodel_nparam=13
            character(len=2000) parameter,optional :: rtmodel_param_names="exp(-lai/2.0):canopy height:leaf radius:           exp(-chlophyll/100.):leaf brown pigments:exp(-50. leaf water):exp(-100 leaf dry matter):           leaf layers (n):soil cmpt 1:           soil cmpt 2:soil cmpt 3:soil cmpt 4:lidf:"
            double precision :: xkar
            double precision :: xleafn_ad
            double precision :: xleafn
            double precision parameter,optional :: skar=-100.0
            double precision parameter,optional :: slai=-2.0
            double precision :: rpl
            double precision :: xkab
            double precision :: xs2
            double precision :: xs3
            double precision parameter,optional :: skw=-0.02
            double precision :: xs1
            double precision :: xs4
            double precision :: xkm
            double precision :: xs2_ad
            double precision parameter,optional :: rtmodel_spectralinterval=1.0
            integer :: nwmax
            double precision :: xs4_ad
            double precision :: xs1_ad
            double precision parameter,optional :: skm=-0.01
            double precision :: xlai_ad
            double precision :: xkw
            double precision :: xkar_ad
            integer parameter,optional :: rtmodel_version=1
            double precision :: xkw_ad
            double precision :: xkm_ad
            integer parameter,optional :: rtmodel_subversion=1
            double precision parameter,optional :: rtmodel_spectralmax=2500.0
            double precision parameter,optional :: rtmodel_spectralmin=400.0
            double precision :: xhc
            double precision :: rpl_ad
            double precision :: xlai
            double precision :: xhc_ad
            character(len=2000) parameter,optional :: rtmodel_param_minmax="0.001
            double precision :: xs3_ad
            double precision :: xkab_ad
        end module mo_rtmodel
        subroutine rt_modelpre(nbands_to_use,bands_to_use) ! in :rtmodel_ad_trans2:rtmodel_ad_trans.f90
            use mo_rtmodel
            use mo_nad
            integer optional,check(len(bands_to_use)>=nbands_to_use),depend(bands_to_use) :: nbands_to_use=len(bands_to_use)
            integer dimension(nbands_to_use) :: bands_to_use
        end subroutine rt_modelpre
        subroutine rt_modelpost ! in :rtmodel_ad_trans2:rtmodel_ad_trans.f90
        end subroutine rt_modelpost
        subroutine rt_modeldpre(npt) ! in :rtmodel_ad_trans2:rtmodel_ad_trans.f90
            integer :: npt
        end subroutine rt_modeldpre
        subroutine rt_modeldpost ! in :rtmodel_ad_trans2:rtmodel_ad_trans.f90
            use dataspec_p5
        end subroutine rt_modeldpost
        subroutine rt_model(nv,nbands,nl,ipt,x,theta_v,phi_v,theta_i,phi_i,brf,wb) ! in :rtmodel_ad_trans2:rtmodel_ad_trans.f90
            use mo_rtmodel
            integer optional,check(len(theta_v)>=nv),depend(theta_v) :: nv=len(theta_v)
            integer optional,check(shape(wb,0)==nbands),depend(wb) :: nbands=shape(wb,0)
            integer optional,check(shape(wb,1)==nl),depend(wb) :: nl=shape(wb,1)
            integer :: ipt
            double precision dimension(13) :: x
            double precision dimension(nv) :: theta_v
            double precision dimension(nv),depend(nv) :: phi_v
            double precision :: theta_i
            double precision :: phi_i
            double precision dimension(nv,nbands),intent(out),depend(nv,nbands) :: brf
            double precision dimension(nbands,nl) :: wb
        end subroutine rt_model
        subroutine rt_modelpred(nv,nbands,nl,ipt,x,theta_v,phi_v,theta_i,phi_i,brf,wb) ! in :rtmodel_ad_trans2:rtmodel_ad_trans.f90
            use mo_rtmodel
            integer optional,check(len(theta_v)>=nv),depend(theta_v) :: nv=len(theta_v)
            integer optional,check(shape(wb,0)==nbands),depend(wb) :: nbands=shape(wb,0)
            integer optional,check(shape(wb,1)==nl),depend(wb) :: nl=shape(wb,1)
            integer :: ipt
            double precision dimension(13) :: x
            double precision dimension(nv) :: theta_v
            double precision dimension(nv),depend(nv) :: phi_v
            double precision :: theta_i
            double precision :: phi_i
            double precision dimension(nv,nbands),intent(out),depend(nv,nbands) :: brf
            double precision dimension(nbands,nl) :: wb
        end subroutine rt_modelpred
        subroutine rt_modeld(nv,nbands,nl,ipt,x,theta_v,phi_v,theta_i,phi_i,brff_ad,wb,x_ad) ! in :rtmodel_ad_trans2:rtmodel_ad_trans.f90
            use mo_rtmodel
            use mo_nad
            integer optional,check(len(theta_v)>=nv),depend(theta_v) :: nv=len(theta_v)
            integer optional,check(len(brff_ad)>=nbands),depend(brff_ad) :: nbands=len(brff_ad)
            integer optional,check(shape(wb,1)==nl),depend(wb) :: nl=shape(wb,1)
            integer :: ipt
            double precision dimension(13) :: x
            double precision dimension(nv) :: theta_v
            double precision dimension(nv),depend(nv) :: phi_v
            double precision :: theta_i
            double precision :: phi_i
            double precision dimension(nbands),intent(in) :: brff_ad
            double precision dimension(nbands,nl),depend(nbands) :: wb
            double precision dimension(13),intent(out) :: x_ad
        end subroutine rt_modeld
        subroutine rt_getnparams(n) ! in :rtmodel_ad_trans2:rtmodel_ad_trans.f90
            use mo_rtmodel
            integer intent(out) :: n
        end subroutine rt_getnparams
        subroutine rt_getspectralinterval(n) ! in :rtmodel_ad_trans2:rtmodel_ad_trans.f90
            use mo_rtmodel
            double precision intent(out) :: n
        end subroutine rt_getspectralinterval
        subroutine rt_getspectralmin(n) ! in :rtmodel_ad_trans2:rtmodel_ad_trans.f90
            use mo_rtmodel
            double precision intent(out) :: n
        end subroutine rt_getspectralmin
        subroutine rt_getspectralmax(n) ! in :rtmodel_ad_trans2:rtmodel_ad_trans.f90
            use mo_rtmodel
            double precision intent(out) :: n
        end subroutine rt_getspectralmax
        subroutine rt_getnames(names) ! in :rtmodel_ad_trans2:rtmodel_ad_trans.f90
            use mo_rtmodel
            use mo_nad
            character*2000 intent(out) :: names
        end subroutine rt_getnames
        subroutine rt_getminmax(names) ! in :rtmodel_ad_trans2:rtmodel_ad_trans.f90
            use mo_rtmodel
            use mo_nad
            character*2000 intent(out) :: names
        end subroutine rt_getminmax
        module spectrum_width_p5 ! in :rtmodel_ad_trans2:dataSpec_P5.f90
            integer parameter,optional :: nlmax=2101
            integer :: nl
        end module spectrum_width_p5
        module dataspec_p5 ! in :rtmodel_ad_trans2:dataSpec_P5.f90
            use spectrum_width_p5
            double precision dimension(2101) :: acabfull
            double precision dimension(2101) :: nrefracfull
            double precision allocatable,dimension(:) :: phis4
            double precision dimension(2101) :: phis3full
            double precision dimension(2101) :: phis1full
            double precision allocatable,dimension(:) :: acar
            double precision allocatable,dimension(:) :: acab
            double precision dimension(2101) :: acmfull
            double precision dimension(2101) :: phis4full
            double precision dimension(2101) :: acwfull
            double precision allocatable,dimension(:) :: phis1
            double precision allocatable,dimension(:) :: phis3
            double precision allocatable,dimension(:) :: phis2
            integer dimension(2101) :: lambdafull
            double precision allocatable,dimension(:) :: nrefrac
            double precision allocatable,dimension(:) :: acm
            double precision dimension(2101) :: acarfull
            double precision allocatable,dimension(:) :: acw
            integer :: itmp
            double precision dimension(2101) :: phis2full
            integer allocatable,dimension(:) :: lambda
        end module dataspec_p5
    end interface 
    module multiple_dom_store_ad ! in :rtmodel_ad_trans2
        integer :: multkl_multiple_dom
        double precision allocatable,dimension(:,:,:,:) :: multl_s_3h
        double precision allocatable,dimension(:,:,:,:) :: multl_xi_4h
        double precision allocatable,dimension(:,:,:) :: multkl_xi_1h
        integer :: multl_multiple_dom
        double precision allocatable,dimension(:,:,:,:) :: multl_s_1h
        double precision allocatable,dimension(:,:,:) :: multkl_xi_2h
        double precision allocatable,dimension(:,:,:,:) :: multl_xi_2h
    end module multiple_dom_store_ad
    module mo_nad ! in :rtmodel_ad_trans2
        double precision allocatable,dimension(:) :: h_c_ad
        double precision allocatable,dimension(:) :: x_nf
        double precision allocatable,dimension(:) :: tl_ad
        double precision :: ag
        double precision allocatable,dimension(:) :: df_ad
        double precision allocatable,dimension(:) :: ximt_ad
        double precision :: cg
        integer :: number
        double precision allocatable,dimension(:) :: h_c
        integer parameter,optional :: nlm=10
        integer :: n_c
        integer :: nwmaxx
        double precision allocatable,dimension(:,:,:) :: xif
        double precision allocatable,dimension(:,:,:) :: xi1u
        double precision allocatable,dimension(:,:,:) :: xi1u_ad
        double precision allocatable,dimension(:) :: tl
        double precision allocatable,dimension(:,:,:) :: xif_ad
        double precision allocatable,dimension(:) :: rs_ad
        double precision dimension(32) :: points
        double precision allocatable,dimension(:) :: rl_ad
        double precision allocatable,dimension(:) :: rl
        double precision parameter,optional :: pi=3.14159265359
        integer :: nw
        double precision allocatable,dimension(:,:,:) :: i0
        double precision :: bg
        double precision allocatable,dimension(:) :: lai
        double precision :: phi_0
        double precision allocatable,dimension(:) :: df
        double precision :: dg
        double precision allocatable,dimension(:) :: xi1_ad
        double precision allocatable,dimension(:) :: r_ad
        double precision allocatable,dimension(:) :: c1_ad
        double precision allocatable,dimension(:) :: a_f
        double precision allocatable,dimension(:) :: c1
        integer :: ild
        double precision allocatable,dimension(:) :: x_ly
        double precision allocatable,dimension(:) :: rs
        double precision allocatable,dimension(:) :: a_f_ad
        double precision allocatable,dimension(:) :: lai_ad
        double precision allocatable,dimension(:) :: xi1
        double precision allocatable,dimension(:) :: r
        double precision dimension(32) :: weights
        double precision :: teta_0
        double precision allocatable,dimension(:,:,:) :: i0_ad
        double precision allocatable,dimension(:) :: ximt
    end module mo_nad
end python module rtmodel_ad_trans2

! This file was auto-generated with f2py (version:1).
! See http://cens.ioc.ee/projects/f2py2e/
